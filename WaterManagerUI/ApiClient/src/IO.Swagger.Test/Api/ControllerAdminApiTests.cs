/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ControllerAdminApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ControllerAdminApiTests
    {
        private ControllerAdminApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ControllerAdminApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ControllerAdminApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ControllerAdminApi
            //Assert.IsInstanceOfType(typeof(ControllerAdminApi), instance, "instance is a ControllerAdminApi");
        }

        /// <summary>
        /// Test AddEsigenza
        /// </summary>
        [Test]
        public void AddEsigenzaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.AddEsigenza(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AddIrrigazione
        /// </summary>
        [Test]
        public void AddIrrigazioneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.AddIrrigazione(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AddRaccolto
        /// </summary>
        [Test]
        public void AddRaccoltoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.AddRaccolto(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AddSensorType
        /// </summary>
        [Test]
        public void AddSensorTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AddSensorType();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test DeleteEsigenza
        /// </summary>
        [Test]
        public void DeleteEsigenzaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.DeleteEsigenza(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test DeleteIrrigazione
        /// </summary>
        [Test]
        public void DeleteIrrigazioneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.DeleteIrrigazione(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test DeleteRaccolto
        /// </summary>
        [Test]
        public void DeleteRaccoltoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.DeleteRaccolto(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test DeleteSensorType
        /// </summary>
        [Test]
        public void DeleteSensorTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.DeleteSensorType(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetAdmin
        /// </summary>
        [Test]
        public void GetAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetAdmin(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetAllAziende
        /// </summary>
        [Test]
        public void GetAllAziendeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllAziende();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetAllCampagne
        /// </summary>
        [Test]
        public void GetAllCampagneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllCampagne();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetAllCampi
        /// </summary>
        [Test]
        public void GetAllCampiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllCampi();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetBacini1
        /// </summary>
        [Test]
        public void GetBacini1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBacini1();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetCount
        /// </summary>
        [Test]
        public void GetCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCount();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetGestoriBacino
        /// </summary>
        [Test]
        public void GetGestoriBacinoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetGestoriBacino();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUsers();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetgestoriAzienda
        /// </summary>
        [Test]
        public void GetgestoriAziendaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetgestoriAzienda();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
