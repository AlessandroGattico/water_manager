/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UtilsControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UtilsControllerApiTests
    {
        private UtilsControllerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UtilsControllerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UtilsControllerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UtilsControllerApi
            //Assert.IsInstanceOfType(typeof(UtilsControllerApi), instance, "instance is a UtilsControllerApi");
        }

        /// <summary>
        /// Test CheckCampagnaNome
        /// </summary>
        [Test]
        public void CheckCampagnaNomeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //int? id = null;
            //var response = instance.CheckCampagnaNome(param, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CheckCampoNome
        /// </summary>
        [Test]
        public void CheckCampoNomeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //int? id = null;
            //var response = instance.CheckCampoNome(param, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CheckMail
        /// </summary>
        [Test]
        public void CheckMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.CheckMail(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CheckUsername
        /// </summary>
        [Test]
        public void CheckUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string param = null;
            //var response = instance.CheckUsername(param);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetBacini
        /// </summary>
        [Test]
        public void GetBaciniTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBacini();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetEsigenze
        /// </summary>
        [Test]
        public void GetEsigenzeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetEsigenze();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetIrrigazioni
        /// </summary>
        [Test]
        public void GetIrrigazioniTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetIrrigazioni();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetRaccolti
        /// </summary>
        [Test]
        public void GetRaccoltiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRaccolti();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetSensorTypes
        /// </summary>
        [Test]
        public void GetSensorTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSensorTypes();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetTopics
        /// </summary>
        [Test]
        public void GetTopicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTopics();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
