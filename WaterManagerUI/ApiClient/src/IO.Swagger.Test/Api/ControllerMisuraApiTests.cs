/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ControllerMisuraApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ControllerMisuraApiTests
    {
        private ControllerMisuraApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ControllerMisuraApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ControllerMisuraApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ControllerMisuraApi
            //Assert.IsInstanceOfType(typeof(ControllerMisuraApi), instance, "instance is a ControllerMisuraApi");
        }

        /// <summary>
        /// Test AddMisura
        /// </summary>
        [Test]
        public void AddMisuraTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //instance.AddMisura(body);
            
        }
        /// <summary>
        /// Test DeleteMisura
        /// </summary>
        [Test]
        public void DeleteMisuraTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.DeleteMisura(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetMisuraId
        /// </summary>
        [Test]
        public void GetMisuraIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetMisuraId(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test GetMisureSensore
        /// </summary>
        [Test]
        public void GetMisureSensoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetMisureSensore(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
